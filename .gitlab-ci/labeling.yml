---
stages:
  - checks
  - train
  - promote
  - build
  - deploy

include:
  - project: 'connylegal/mietright_deployments'
    ref: main
    file: '/.gitlab-ci/ml.yaml'

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - /opt/gitlab/cache/image-cache

variables:
  FAILFASTCI_NAMESPACE: connylegal
  OCI_REPO: img.conny.dev
  IMAGE_NAME: $OCI_REPO/conny/ml/labeling
  APP: labeling
  MLFLOW_PROMOTE_METRIC: test_accuracy
  MLFLOW_PROMOTE_DIRECTION: maximize
  DVC_REGISTRY_URI: git@github.com:mietright/labeling.git
  DVC_DATASETS: |
    data/output/train.jsonl -o data/output/train.jsonl
    data/output/validation.jsonl -o data/output/validation.jsonl
    data/output/test.jsonl -o data/output/test.jsonl
  MLFLOW_ENTRYPOINT: labeling/models/model/train.py
  # MLFLOW_ENTRYPOINT_PARAMS: -P downsample=10 -P model-dir=artifacts/
  MLFLOW_EXPERIMENT_ID: '-1'
  POST_PROMOTE_PIPELINE: ./.gitlab-ci/labeling-deploy.yml
  MEOWLFLOW_SCHEMA_LOCAL_PATH: labeling/models/model/meowlflow_schema.py
  MEOWLFLOW_CUSTOM_STEPS: |
    RUN apt-get update -y && apt-get install -y build-essential pkg-config python3-dev
    COPY $MEOWLFLOW_SCHEMA_LOCAL_PATH /opt/meowlflow/schema.py
  SCRIPT_ENTRYPOINT: poetry run mlflow run . --experiment-id=$MLFLOW_EXPERIMENT_ID --entry-point=$MLFLOW_ENTRYPOINT --env-manager=local

lint:
  tags:
    - kubernetes
  stage: checks
  needs: []
  image:
    name: python:3.9
    entrypoint: ['']
  script:
    - apt update
    - apt install -y git make
    - make install-dev
    - make lint
    - make black-test

pytest:
  tags:
    - kubernetes
  stage: checks
  needs: []
  image:
    name: python:3.9
    entrypoint: ['']
  script:
    - apt update
    - apt install -y git make
    - make install-dev
    - make test

openapi:
  tags:
    - kubernetes
  stage: checks
  needs: []
  image:
    name: python:3.9
    entrypoint: ['']
  script:
    - python -m pip install 'meowlflow @ git+https://github.com/connylabs/meowlflow.git'
    - diff labeling/api/api.json <(poetry run meowlflow openapi --endpoint infer --schema-path $MEOWLFLOW_SCHEMA_LOCAL_PATH 2>/dev/null)

docs:
  tags:
    - kubernetes
  stage: checks
  needs: []
  image:
    name: openapitools/openapi-generator-cli:v5.3.1
    entrypoint: ['']
  variables:
    CONTAINERIZE_GENERATE: "false"
  script:
    - apt update
    - apt install -y git make
    - rm -r Documentation
    - make docs
    - |
        DIFF="$(git status --porcelain 2>/dev/null )"
        if [ "$(echo -n "$DIFF" | wc -l)" -ne 0 ]; then
          printf 'Documentation is out of date!\nDiff:\n%s\nRun:\n\tmake docs\n' "$DIFF"
          exit 1
        fi

train:
  extends: .ml-experiment
  stage: train
  needs:
    - lint
    - pytest
    - docs
    - openapi
  script:
    - mkdir -p /root/.ssh
    - cp /var/lib/ssh/id_rsa /root/.ssh
    - chmod 0400 /root/.ssh/id_rsa
    - ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
    - apt-get update
    - apt-get install -y git
    - apt-get install -y build-essential pkg-config python3-dev
    - pip install pipx
    - pipx install dvc[s3]
    - pipx install poetry
    - pipx ensurepath && . ~/.profile
    - poetry install
    - re_NON_EMPTY='\S'
    - readarray -t <<< $DVC_DATASETS
    - for DATASET in "${MAPFILE[@]}"; do echo $DATASET | grep -q $re_NON_EMPTY && echo "downloading" $DATASET "from" $DVC_REGISTRY_URI && dvc get $DVC_REGISTRY_URI $DATASET;done
    - if [ "${MLFLOW_ENTRYPOINT_PARAMS}" ]; then $SCRIPT_ENTRYPOINT $MLFLOW_ENTRYPOINT_PARAMS; else $SCRIPT_ENTRYPOINT;fi

dockerfile:
  extends: .ml-dockerfile
  needs:
    - train
  stage: build

build-container:
  extends: .ml-build-container
  needs:
    - dockerfile
  stage: build
  variables:
    TAG: v.$CI_COMMIT_REF_SLUG

smoketest:
  services:
    - name: $IMAGE_NAME:v.$CI_COMMIT_REF_SLUG
      alias: labeling
      entrypoint: ["/miniconda/envs/custom_env/bin/meowlflow"]
      command: ["serve", "--port=8080", "--schema-path=/opt/meowlflow/schema.py"]
  image: curlimages/curl
  needs:
    - build-container
  stage: build
  script:
    - sleep 30
    - curl --fail http://labeling:8080/metrics

promote:
  extends: .ml-promote
  needs:
    - train
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'
  stage: promote

deploy:
  needs:
    - promote
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_TAG'
  stage: deploy
  trigger:
    include:
      - artifact: generated-pipeline.yml
        job: promote
    strategy: depend
